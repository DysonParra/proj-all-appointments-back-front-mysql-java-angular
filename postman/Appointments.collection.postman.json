{
	"info": {
		"_postman_id": "ed0f2570-389d-48a7-8ad4-31b574448008",
		"name": "Appointments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Peticiones",
			"item": [
				{
					"name": "appointment",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"dtDateCreated\" : \"2020-03-07 05:23:10\",",
                                            "  \"intEmployeeCreated\" : -1,",
                                            "  \"intClientId\" : -1,",
                                            "  \"intEmployeeId\" : -1,",
                                            "  \"strClientName\" : \"\",",
                                            "  \"strClientContact\" : \"\",",
                                            "  \"dtStartTime\" : \"2020-03-07 05:23:10\",",
                                            "  \"dtEndTimeExpected\" : \"2020-03-07 05:23:10\",",
                                            "  \"dtEndTime\" : \"2020-03-07 05:23:10\",",
                                            "  \"decPriceExpected\" : -1,",
                                            "  \"decPriceFull\" : -1,",
                                            "  \"decDiscount\" : -1,",
                                            "  \"decPriceFinal\" : -1,",
                                            "  \"bitCanceled\" : false,",
                                            "  \"txtCancelationReason\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"dtDateCreated\" : \"2021-01-02 01:24:45\",",
                                            "  \"intEmployeeCreated\" : 102,",
                                            "  \"intClientId\" : 102,",
                                            "  \"intEmployeeId\" : 102,",
                                            "  \"strClientName\" : \"S12\",",
                                            "  \"strClientContact\" : \"S12\",",
                                            "  \"dtStartTime\" : \"2021-01-02 01:24:45\",",
                                            "  \"dtEndTimeExpected\" : \"2021-01-02 01:24:45\",",
                                            "  \"dtEndTime\" : \"2021-01-02 01:24:45\",",
                                            "  \"decPriceExpected\" : 102,",
                                            "  \"decPriceFull\" : 102,",
                                            "  \"decDiscount\" : 102,",
                                            "  \"decPriceFinal\" : 102,",
                                            "  \"bitCanceled\" : true,",
                                            "  \"txtCancelationReason\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'appointment');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "client",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"strClientName\" : \"\",",
                                            "  \"strContactMobile\" : \"\",",
                                            "  \"strContactMail\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"strClientName\" : \"S12\",",
                                            "  \"strContactMobile\" : \"S12\",",
                                            "  \"strContactMail\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'client');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "employee",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"strFirstName\" : \"\",",
                                            "  \"strLastName\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"strFirstName\" : \"S12\",",
                                            "  \"strLastName\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'employee');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "schedule",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"intEmployeeId\" : -1,",
                                            "  \"dtFrom\" : \"2020-03-07 05:23:10\",",
                                            "  \"dtTo\" : \"2020-03-07 05:23:10\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"intEmployeeId\" : 102,",
                                            "  \"dtFrom\" : \"2021-01-02 01:24:45\",",
                                            "  \"dtTo\" : \"2021-01-02 01:24:45\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'schedule');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "service",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"strServiceName\" : \"\",",
                                            "  \"intDuration\" : -1,",
                                            "  \"decPrice\" : -1",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"strServiceName\" : \"S12\",",
                                            "  \"intDuration\" : 102,",
                                            "  \"decPrice\" : 102",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'service');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "service-booked",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"intAppointmentI\" : -1,",
                                            "  \"intServiceId\" : -1,",
                                            "  \"decPrice\" : -1",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"intAppointmentI\" : 102,",
                                            "  \"intServiceId\" : 102,",
                                            "  \"decPrice\" : 102",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'service-booked');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "service-provided",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"intAppointmentI\" : -1,",
                                            "  \"intServiceId\" : -1,",
                                            "  \"decPrice\" : -1",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"intAppointmentI\" : 102,",
                                            "  \"intServiceId\" : 102,",
                                            "  \"decPrice\" : 102",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'service-provided');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.set('%domEntityKey%', 101);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http"
		},
		{
			"key": "host",
			"value": "localhost"
		},
		{
			"key": "port",
			"value": "8080"
		},
		{
			"key": "api",
			"value": "api/v1"
		},
		{
			"key": "pages",
			"value": "pages"
		}
	],
	"protocolProfileBehavior": {}
}